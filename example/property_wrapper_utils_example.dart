import 'package:fcs_directus/fcs_directus.dart';

/// Exemple des m√©thodes utilitaires des Property Wrappers
///
/// D√©montre toutes les m√©thodes sympas ajout√©es √† chaque type de wrapper

class Product extends DirectusModel {
  @override
  String get itemName => 'products';

  Product(super.data);
  Product.empty() : super.empty();

  late final name = stringValue('name');
  late final description = stringValue('description');
  late final price = doubleValue('price');
  late final stock = intValue('stock');
  late final discount = doubleValue('discount');
  late final active = boolValue('active', defaultValue: true);
  late final featured = boolValue('featured');
  late final publishedAt = dateTimeValue('published_at');
  late final tags = listValue<String>('tags');

  @override
  String toString() => 'Product($name, ‚Ç¨${price.toStringAsFixed(2)})';
}

void main() {
  DirectusModel.registerFactory<Product>((data) => Product(data));

  print('üéØ M√©thodes Utilitaires des Property Wrappers\n');

  // === 1. StringProperty ===
  print('üìù 1. StringProperty - M√©thodes utilitaires');

  final product = Product({
    'id': '1',
    'name': '  laptop hp  ',
    'description': 'Un ordinateur portable',
    'price': 999.99,
    'stock': 10,
    'discount': 0.15,
    'active': true,
    'featured': false,
    'tags': ['electronics', 'computers'],
  });

  print('   Nom initial: "${product.name}"');
  print('   Length: ${product.name.length}');
  print('   isEmpty: ${product.name.isEmpty}');

  // Trim
  product.name.trim();
  print('   Apr√®s trim(): "${product.name}"');

  // Uppercase/Lowercase
  product.name.toUpperCase();
  print('   Apr√®s toUpperCase(): "${product.name}"');

  product.name.toLowerCase();
  print('   Apr√®s toLowerCase(): "${product.name}"');

  // Capitalize
  product.name.capitalize();
  print('   Apr√®s capitalize(): "${product.name}"');

  // Append/Prepend
  product.name.append(' Elite');
  print('   Apr√®s append(" Elite"): "${product.name}"');

  product.name.prepend('Super ');
  print('   Apr√®s prepend("Super "): "${product.name}"');

  // Replace
  product.name.replace('Super', 'Mega');
  print('   Apr√®s replace("Super", "Mega"): "${product.name}"');

  // Contains
  print('   Contains "Elite": ${product.name.contains("Elite")}');

  // Clear
  product.name.clear();
  print(
    '   Apr√®s clear(): "${product.name}" (isEmpty: ${product.name.isEmpty})\n',
  );

  // === 2. IntProperty ===
  print('üî¢ 2. IntProperty - M√©thodes utilitaires');

  product.name.set('Laptop');
  print('   Stock initial: ${product.stock}');

  // Increment/Decrement
  product.stock.increment();
  print('   Apr√®s increment(): ${product.stock}');

  product.stock.decrement();
  print('   Apr√®s decrement(): ${product.stock}');

  product.stock.incrementBy(5);
  print('   Apr√®s incrementBy(5): ${product.stock}');

  product.stock.decrementBy(3);
  print('   Apr√®s decrementBy(3): ${product.stock}');

  // Multiply/Divide
  product.stock.multiplyBy(2);
  print('   Apr√®s multiplyBy(2): ${product.stock}');

  product.stock.divideBy(3);
  print('   Apr√®s divideBy(3): ${product.stock}');

  // Clamp
  product.stock.set(-5);
  print('   Stock n√©gatif: ${product.stock}');
  product.stock.clampMin(0);
  print('   Apr√®s clampMin(0): ${product.stock}');

  product.stock.set(150);
  product.stock.clampMax(100);
  print('   Apr√®s clampMax(100): ${product.stock}');

  product.stock.set(-10);
  product.stock.clamp(0, 50);
  print('   Apr√®s clamp(0, 50) avec -10: ${product.stock}');

  // Checks
  product.stock.set(10);
  print('   isPositive: ${product.stock.isPositive}');
  print('   isNegative: ${product.stock.isNegative}');
  print('   isZero: ${product.stock.isZero}');

  // Abs
  product.stock.set(-15);
  product.stock.abs();
  print('   Apr√®s abs() sur -15: ${product.stock}');

  // Reset
  product.stock.reset();
  print('   Apr√®s reset(): ${product.stock} (valeur par d√©faut)\n');

  // === 3. DoubleProperty ===
  print('üí∞ 3. DoubleProperty - M√©thodes utilitaires');

  print('   Prix initial: ${product.price}');

  // Increment/Decrement
  product.price.increment();
  print('   Apr√®s increment(): ${product.price}');

  product.price.decrementBy(50.5);
  print('   Apr√®s decrementBy(50.5): ${product.price}');

  // Multiply/Divide
  product.price.multiplyBy(1.2);
  print('   Apr√®s multiplyBy(1.2): ${product.price}');

  product.price.divideBy(2);
  print('   Apr√®s divideBy(2): ${product.price}');

  // Round operations
  product.price.set(123.456);
  print('   Prix avec d√©cimales: ${product.price}');

  final priceCopy = product.price.value;
  product.price.round();
  print('   Apr√®s round(): ${product.price}');

  product.price.set(priceCopy);
  product.price.ceil();
  print('   Apr√®s ceil(): ${product.price}');

  product.price.set(priceCopy);
  product.price.floor();
  print('   Apr√®s floor(): ${product.price}');

  product.price.set(priceCopy);
  product.price.truncate();
  print('   Apr√®s truncate(): ${product.price}');

  // Formatting
  product.price.set(999.99);
  print('   Format 2 d√©cimales: ${product.price.toStringAsFixed(2)}');
  print('   Format 0 d√©cimale: ${product.price.toStringAsFixed(0)}');

  // Clamp
  product.price.set(5000);
  product.price.clamp(100, 2000);
  print('   Apr√®s clamp(100, 2000) sur 5000: ${product.price}');

  // Checks
  print('   isPositive: ${product.price.isPositive}');

  // Abs
  product.price.set(-50);
  product.price.abs();
  print('   Apr√®s abs() sur -50: ${product.price}\n');

  // === 4. BoolProperty ===
  print('üîò 4. BoolProperty - M√©thodes utilitaires');

  print('   Active initial: ${product.active}');
  print('   Featured initial: ${product.featured}');

  // SetTrue/SetFalse
  product.active.setFalse();
  print('   Apr√®s active.setFalse(): ${product.active}');

  product.active.setTrue();
  print('   Apr√®s active.setTrue(): ${product.active}');

  // Toggle
  product.featured.toggle();
  print('   Apr√®s featured.toggle() (√©tait false): ${product.featured}');

  product.featured.toggle();
  print('   Apr√®s featured.toggle() (√©tait true): ${product.featured}');

  // Reset
  product.active.set(false);
  product.active.reset();
  print(
    '   Apr√®s active.reset(): ${product.active} (valeur par d√©faut: true)\n',
  );

  // === 5. DateTimeProperty ===
  print('üìÖ 5. DateTimeProperty - M√©thodes utilitaires');

  // SetNow
  product.publishedAt.setNow();
  print('   Apr√®s setNow(): ${product.publishedAt}');

  // SetToday
  product.publishedAt.setToday();
  print('   Apr√®s setToday(): ${product.publishedAt}');

  // Add operations
  product.publishedAt.addDays(7);
  print('   Apr√®s addDays(7): ${product.publishedAt}');

  product.publishedAt.addHours(-2);
  print('   Apr√®s addHours(-2): ${product.publishedAt}');

  product.publishedAt.addMinutes(30);
  print('   Apr√®s addMinutes(30): ${product.publishedAt}');

  // Checks
  product.publishedAt.set(DateTime(2024, 1, 1));
  print('   Date: ${product.publishedAt}');
  print('   isPast: ${product.publishedAt.isPast}');
  print('   isFuture: ${product.publishedAt.isFuture}');
  print('   isToday: ${product.publishedAt.isToday}');

  product.publishedAt.setToday();
  print('   Apr√®s setToday() ‚Üí isToday: ${product.publishedAt.isToday}\n');

  // === 6. ListProperty ===
  print('üìã 6. ListProperty - M√©thodes utilitaires (d√©j√† existantes)');

  print('   Tags: ${product.tags}');
  print('   Length: ${product.tags.length}');
  print('   isEmpty: ${product.tags.isEmpty}');

  product.tags.add('promotion');
  print('   Apr√®s add("promotion"): ${product.tags}');

  product.tags.removeItem('computers');
  print('   Apr√®s removeItem("computers"): ${product.tags}');

  product.tags.clear();
  print(
    '   Apr√®s clear(): ${product.tags} (isEmpty: ${product.tags.isEmpty})\n',
  );

  // === 7. R√©sum√© ===
  print('‚ú® R√©sum√© des m√©thodes utilitaires:');
  print('');
  print('   StringProperty:');
  print('   ‚Ä¢ clear(), isEmpty, isNotEmpty, length');
  print('   ‚Ä¢ append(), prepend(), trim()');
  print('   ‚Ä¢ toUpperCase(), toLowerCase(), capitalize()');
  print('   ‚Ä¢ contains(), replace()');
  print('');
  print('   IntProperty:');
  print('   ‚Ä¢ increment(), decrement(), incrementBy(), decrementBy()');
  print('   ‚Ä¢ multiplyBy(), divideBy()');
  print('   ‚Ä¢ clamp(), clampMin(), clampMax()');
  print('   ‚Ä¢ isPositive, isNegative, isZero');
  print('   ‚Ä¢ abs(), reset()');
  print('');
  print('   DoubleProperty:');
  print('   ‚Ä¢ increment(), decrement(), incrementBy(), decrementBy()');
  print('   ‚Ä¢ multiplyBy(), divideBy()');
  print('   ‚Ä¢ round(), ceil(), floor(), truncate()');
  print('   ‚Ä¢ clamp(), abs()');
  print('   ‚Ä¢ toStringAsFixed()');
  print('   ‚Ä¢ isPositive, isNegative, isZero');
  print('');
  print('   BoolProperty:');
  print('   ‚Ä¢ setTrue(), setFalse()');
  print('   ‚Ä¢ toggle()');
  print('   ‚Ä¢ reset()');
  print('');
  print('   DateTimeProperty:');
  print('   ‚Ä¢ setNow(), setToday()');
  print('   ‚Ä¢ addDays(), addHours(), addMinutes()');
  print('   ‚Ä¢ isPast, isFuture, isToday');
  print('   ‚Ä¢ format()');
  print('');
  print('   ListProperty:');
  print('   ‚Ä¢ add(), removeItem(), clear()');
  print('   ‚Ä¢ length, isEmpty, isNotEmpty');
}
