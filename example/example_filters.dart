// ignore_for_file: unused_local_variable

import 'package:fcs_directus/fcs_directus.dart';

/// Exemple d'utilisation avancÃ©e des filtres avec fcs_directus.
///
/// DÃ©montre :
/// - Filtres simples et combinÃ©s
/// - OpÃ©rateurs de comparaison
/// - OpÃ©rateurs de chaÃ®ne
/// - Filtres sur relations
/// - Filtres NULL et boolÃ©ens
void main() async {
  final config = DirectusConfig(
    baseUrl: 'https://your-directus-instance.com',
    enableLogging: true,
  );

  final client = DirectusClient(config);

  // Authentification
  await client.auth.login(email: 'user@example.com', password: 'your-password');

  // ============================================================================
  // FILTRES SIMPLES
  // ============================================================================

  print('ðŸ“Œ Filtres simples\n');

  // Ã‰galitÃ©
  var query = QueryParameters(
    filter: Filter.field('status').equals('published'),
  );
  print('Produits publiÃ©s:');
  var products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // Comparaison numÃ©rique
  query = QueryParameters(filter: Filter.field('price').greaterThan(100));
  print('Produits > 100â‚¬:');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // Entre deux valeurs
  query = QueryParameters(filter: Filter.field('price').between(50, 200));
  print('Produits entre 50â‚¬ et 200â‚¬:');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // ============================================================================
  // OPÃ‰RATEURS DE CHAÃŽNE
  // ============================================================================

  print('ðŸ“Œ OpÃ©rateurs de chaÃ®ne\n');

  // Contient
  query = QueryParameters(filter: Filter.field('name').contains('laptop'));
  print('Produits contenant "laptop":');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // Commence par
  query = QueryParameters(filter: Filter.field('name').startsWith('Apple'));
  print('Produits commenÃ§ant par "Apple":');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // Se termine par
  query = QueryParameters(
    filter: Filter.field('email').endsWith('@example.com'),
  );
  print('Emails @example.com:');
  var users = await client.items('users').readMany(query: query);
  print('  â†’ ${users.data.length} rÃ©sultats\n');

  // Insensible Ã  la casse
  query = QueryParameters(
    filter: Filter.field('name').containsInsensitive('LAPTOP'),
  );
  print('Produits contenant "LAPTOP" (insensible):');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // ============================================================================
  // OPÃ‰RATEURS DE LISTE
  // ============================================================================

  print('ðŸ“Œ OpÃ©rateurs de liste\n');

  // Dans la liste
  query = QueryParameters(
    filter: Filter.field('category').inList(['electronics', 'computers']),
  );
  print('Produits dans electronics ou computers:');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // Pas dans la liste
  query = QueryParameters(
    filter: Filter.field('status').notInList(['archived', 'deleted']),
  );
  print('Produits non archivÃ©s/supprimÃ©s:');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // ============================================================================
  // FILTRES NULL ET BOOLÃ‰ENS
  // ============================================================================

  print('ðŸ“Œ Filtres NULL et boolÃ©ens\n');

  // NULL
  query = QueryParameters(filter: Filter.field('deleted_at').isNull());
  print('Produits non supprimÃ©s (deleted_at est NULL):');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // NOT NULL
  query = QueryParameters(filter: Filter.field('description').isNotNull());
  print('Produits avec description:');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // BoolÃ©en
  query = QueryParameters(filter: Filter.field('featured').equals(true));
  print('Produits en vedette:');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // ============================================================================
  // FILTRES COMBINÃ‰S AVEC AND
  // ============================================================================

  print('ðŸ“Œ Filtres combinÃ©s avec AND\n');

  query = QueryParameters(
    filter: Filter.and([
      Filter.field('status').equals('published'),
      Filter.field('price').greaterThan(50),
      Filter.field('stock').greaterThan(0),
    ]),
  );
  print('Produits publiÃ©s, > 50â‚¬ et en stock:');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // ============================================================================
  // FILTRES COMBINÃ‰S AVEC OR
  // ============================================================================

  print('ðŸ“Œ Filtres combinÃ©s avec OR\n');

  query = QueryParameters(
    filter: Filter.or([
      Filter.field('featured').equals(true),
      Filter.field('price').lessThan(50),
    ]),
  );
  print('Produits en vedette OU < 50â‚¬:');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // ============================================================================
  // FILTRES IMBRIQUÃ‰S COMPLEXES
  // ============================================================================

  print('ðŸ“Œ Filtres imbriquÃ©s complexes\n');

  query = QueryParameters(
    filter: Filter.and([
      Filter.field('status').equals('published'),
      Filter.or([
        Filter.and([
          Filter.field('category').equals('electronics'),
          Filter.field('price').lessThan(500),
        ]),
        Filter.field('featured').equals(true),
      ]),
      Filter.field('stock').greaterThan(0),
    ]),
  );
  print('Produits complexes:');
  print('  - PubliÃ©s ET en stock');
  print('  - ET (Ã©lectronique < 500â‚¬ OU en vedette)');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats\n');

  // ============================================================================
  // FILTRES SUR RELATIONS
  // ============================================================================

  print('ðŸ“Œ Filtres sur relations\n');

  // Filtre sur une relation Many-to-One
  query = QueryParameters(
    filter: Filter.relation(
      'author',
    ).where(Filter.field('status').equals('active')),
  );
  print('Articles dont l\'auteur est actif:');
  var articles = await client.items('articles').readMany(query: query);
  print('  â†’ ${articles.data.length} rÃ©sultats\n');

  // Filtre "some" sur une relation One-to-Many
  // Au moins une catÃ©gorie correspond
  query = QueryParameters(
    filter: Filter.some(
      'categories',
    ).where(Filter.field('name').equals('Technology')),
  );
  print('Articles avec au moins une catÃ©gorie "Technology":');
  articles = await client.items('articles').readMany(query: query);
  print('  â†’ ${articles.data.length} rÃ©sultats\n');

  // Filtre "none" sur une relation One-to-Many
  // Aucune catÃ©gorie ne correspond
  query = QueryParameters(
    filter: Filter.none('tags').where(Filter.field('name').equals('draft')),
  );
  print('Articles sans le tag "draft":');
  articles = await client.items('articles').readMany(query: query);
  print('  â†’ ${articles.data.length} rÃ©sultats\n');

  // ============================================================================
  // FILTRES AVEC RECHERCHE ET PAGINATION
  // ============================================================================

  print('ðŸ“Œ Filtres avec recherche et pagination\n');

  query = QueryParameters(
    filter: Filter.and([
      Filter.field('status').equals('published'),
      Filter.field('price').between(50, 500),
    ]),
    search: 'laptop',
    sort: ['-date_created', 'price'],
    limit: 10,
    offset: 0,
  );
  print('Produits publiÃ©s, 50-500â‚¬, contenant "laptop":');
  print('  - TriÃ©s par date (desc) puis prix (asc)');
  print('  - Page 1 (10 items)');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats');
  if (products.meta?.totalCount != null) {
    print('  â†’ ${products.meta!.totalCount} au total\n');
  }

  // ============================================================================
  // FILTRES AVEC SÃ‰LECTION DE CHAMPS
  // ============================================================================

  print('ðŸ“Œ Filtres avec sÃ©lection de champs\n');

  query = QueryParameters(
    filter: Filter.field('status').equals('published'),
    fields: ['id', 'name', 'price', 'status'],
    limit: 5,
  );
  print('Produits publiÃ©s (champs limitÃ©s):');
  products = await client.items('products').readMany(query: query);
  print('  â†’ ${products.data.length} rÃ©sultats');
  if (products.data.isNotEmpty) {
    print('  â†’ Champs: ${products.data.first.keys.join(", ")}\n');
  }

  // ============================================================================
  // EXEMPLE COMPLET : RECHERCHE MULTI-CRITÃˆRES
  // ============================================================================

  print('ðŸ“Œ Exemple complet : Recherche multi-critÃ¨res\n');

  query = QueryParameters(
    filter: Filter.and([
      // Statut publiÃ©
      Filter.field('status').equals('published'),
      // En stock
      Filter.field('stock').greaterThan(0),
      // Prix entre 100 et 1000
      Filter.field('price').between(100, 1000),
      // CatÃ©gorie dans electronics ou computers
      Filter.field('category').inList(['electronics', 'computers']),
      // Pas supprimÃ©
      Filter.field('deleted_at').isNull(),
      // Soit en vedette, soit bien notÃ©
      Filter.or([
        Filter.field('featured').equals(true),
        Filter.field('rating').greaterThanOrEqual(4.5),
      ]),
    ]),
    search: 'pro',
    sort: ['-featured', '-rating', 'price'],
    fields: ['id', 'name', 'price', 'rating', 'featured', 'stock'],
    limit: 20,
  );

  print('CritÃ¨res de recherche:');
  print('  - PubliÃ© et en stock');
  print('  - Prix: 100-1000â‚¬');
  print('  - CatÃ©gorie: electronics ou computers');
  print('  - Non supprimÃ©');
  print('  - En vedette OU note â‰¥ 4.5');
  print('  - Contenant "pro"');
  print('  - Tri: vedette, note, prix');
  print('  - LimitÃ© Ã  20 rÃ©sultats');

  products = await client.items('products').readMany(query: query);
  print('\nâœ… ${products.data.length} produits trouvÃ©s');

  // Afficher les rÃ©sultats
  for (var i = 0; i < products.data.length && i < 5; i++) {
    final product = products.data[i];
    print('  ${i + 1}. ${product['name']}');
    print(
      '     Prix: ${product['price']}â‚¬ | Note: ${product['rating']} | '
      'Stock: ${product['stock']}',
    );
  }

  // ============================================================================
  // NETTOYAGE
  // ============================================================================

  await client.auth.logout();
  client.dispose();
  print('\nâœ… TerminÃ© !');
}
